---
title: Изучение систем паролей в играх SEGA MD/Genesis
---
В этом документе нам понадобятся:  

- ['Gens мод VKNTracer'](http://consolgames.ru/download.php?view.61) от Виктора Константиновича Яковлева. Будем использовать эту версию, потому что в ней совмещены неглючный (в отличие от G8z et al'овского трейсера) поиск читов позаимствованный из мода Gens-а mk2, и остановы, возможностей которых нам хватит для наших сегодняшних задач (я уж не говорю об имеющихся тут же хуках, взятых из трейсера G8z et al'а, которые мы сегодня использовать не будем).
- IDA 5.2, на этот раз, просто необходима. Без нее легко утонуть в море дизассемблированного кода. Напомню, что HardWareMan написал под нее [загрузчик](http://forum.emu-russia.net/viewtopic.php?f=13&t=530&sid=eb19bc2fe361b68700e2184915b690c0&view=unread#unread) для РОМов Сеги.
- Базовые знания ассемблера M68000.
- ROM 'Cannon Fodder (E) [!].bin'.  
  
Сразу нужно сказать, что процесс исследования систем паролей Сеги почти не отличается от NES. Разница лишь в инструментах.  
Итак, как и в [доке по паролям на NES](/doc/fceuDoc2), сначала мы должны найти пароль в оперативной памяти. Тут нам и пригодится поиск читов в Gens VKNTracer: открываем наш ROM, переходим на экран ввода пароля и открываем CPU -> Debug -> Поиск-кодов. Для удобства можно выставить Data Type: Hexadecimal. Так как мы ищем одну букву, наверное, она не будет занимать больше одного байта в памяти, поэтому Data Size: 1 byte. Нажимаем 'Сброс' и в левом окне у нас появляются все ячейки оперативной памяти, среди которых сейчас находится и ячейка с первой буквой пароля, которую мы будем искать. Жмём ОК, а через некоторое время открываем окно поиска читов снова. Так как мы не меняли значение первой буквы пароля, ячейка, которая ее содержит, не изменилась. Смело выставляем =(равен) и жмем поиск. Пока это не заметно, но часть ячеек, значения которых поменялись с момента первого вызова окна поиска читов, уже отброшена и зона поиска заметно снизилась. Теперь сделаем первой буквой пароля 'B'. Опять вызываем окно поиска читов и, так как, код буквы, скорее всего, увеличился на единичку, выставляем >(больше чем) и жмем поиск. Увеличивая и уменьшая первую букву, легко добиться отсечения всех ненужных нам ячеек:  
![cheat search](Cheat_Search.png)  
Ячейка 0xFF280E выглядит очень подозрительно. Во-первых, она изменилась только на единичку, как и наша буква. А во-вторых, значение 0x41 соответствует коду буквы 'A' в кодировке ASCII. Чтобы убедиться наверняка, откроем просмотрщик памяти: `CPU->Debug->Genesis Main 68k RAM`, и найдем адрес 0x280E. Оставив просмотрщик в фоне, перейдем в окно эмулятора и поизменяем значения разных букв пароля. Тут уж сомнений не остается: по адресам в оперативной памяти 0x280E - 0x2812 расположены наши пять знаков пароля. Еще мы узнали, что все буквы содержатся в кодировке ASCII и, если буква еще не набрана, в ячейке будет ноль.   
Чтобы теперь нам найти алгоритм проверки пароля, поставим останов на чтение из этого диапазона: CPU -> Debug -> Genesis Main 68k Debugger:  
![check debug](check_Debug.png)  
Выставляем останов, нажимаем ОК и проверяем введенный пароль в игре (пусть даже неверный). Игра останавливается по адресам 0x01A460 и 0x1A46E. Наверное, это и есть процедура проверки пароля, которая после прочтения значений букв говорит, правильный это пароль или нет. Но изучать эту процедуру в отладчике сплошное мучение.После загрузки ROM'а в IDA и распознания кода по адресу 0x01A460, получаем чистую и довольно понятную процедуру проверки:  
![Graph_of_Password_Check](Graph_of_Password_Check.png)
Где  
![Graph_of_CheckSum_Shuffle](Graph_of_CheckSum_Shuffle.png)  
и  
![Graph_of_CheckSum_Calc](Graph_of_CheckSum_Calc.png)  
где  
![Graph_of_Shuffle_Data](Graph_of_Shuffle_Data.png)  
Итак, что мы видим из этой процедуры? Игра берет 5 знаков пароля, затем по определенной, не имеющей почти никакого математического смысла, процедуре из знаков пароля рассчитывает чексумму пароля. Из младших битов чексуммы находятся номер уровня и число оставшихся в живых солдат (эти две величины проверяются на превышение максимальных значений). Затем из этих двух величин рассчитывается вторая чексумма, которую должен иметь правильный пароль с таким номером уровня и таким числом солдат. Если он совпадает с первой чексуммой, значит пароль верный. Процедура возвращает в регистре d0 ноль. Если хотя бы одно из условий верности пароля не выполняется (номер уровня больше 23, число солдат больше 360 или чексуммы паролей не совпали), процедура возвращает -1 в d0. Особенно интересен конец процедуры:   

```{#code .Assembler}
ROM:0001A4C8 cmpi.l #'MGFJ',(Pwd_Chars_1_4).l
ROM:0001A4D2 bne.s Exit_Password_Check
ROM:0001A4D4 cmpi.b #'H',(Pwd_Chars_5).l ; MGFJH - секретный пароль
ROM:0001A4DC bne.s Exit_Password_Check
ROM:0001A4DE st (Cheat_Flag).l ; FF-чит активирован
```
Это же явная проверка на определенный пароль (MGFJH)! Из процедуры видно, что даже, если введенный пароль MGFJH, игра напишет Invalid Code, но перед этим выставит флаг включения чита в определенной ячейке памяти. Метод поиска того, что же делает этот пароль остается за рамками данного документа. На самом деле, после введения этого пароля, если во время битвы выбрать белый флаг, миссия будет пройдена, а не провалена, как это обычно бывает. На момент написания документа (ноябрь 2008 года), Интернет об этом пароле не знает.  
Что еще мы можем выудить из этой процедуры? Ну, можно написать небольшой брутфорс, который бы перебирал все пароли по порядку, начиная от AAAAA и заканчивая ZZZZZ, проверял их по этому алгоритму и выводил только те, что прошли проверку. Реализацию подобного алгоритма и исходники на паскале можно взять [здесь](/files/CannonFodder_PWD_Util.rar).  
Кстати, тут можно сразу проверить известный портал [GameFaqs](http://www.gamefaqs.com/console/genesis/code/586092.html) на ноябрь 2008:  
  
>Passwords  
>NTSC Passwords  
>Enter these on the load screen  
>
>Password Effect   
>UTEFD 10   
>***  
>MMVI 24   
>***  
>PXJND Level 1   
>
>Contributed By: AlaskaFox  
>
>PAL Passwords  
>Levels 1-9 have the same passwords as the NTSC version.  
>
>Password Effect   
>YJKCF 10   
>***  
>GWZED 22   
>
>Contributed By: AlaskaFox  
>
>Know Something We Don't?  

Да уж, мы точно знаем что-то, чего не знаете Вы... Непонятно о каких PAL и NTSC паролях идет речь - судя по результатам работы брутфорса, это все пароли одной версии (а ведь другой-то и нет), просто с разным количеством солдат. Видимо 1-9 уровни, AlaskaFox проходил с одними и теми же потерями, а потом потери стали различаться и пароли на те же уровни тоже. Что это за четырехзначный пароль на 24 уровень? Мы-то уже знаем, что любой пароль на 24 уровень, даже если у него будет правильная чексумма, игра признает неправильным.  
Ну и напоследок, можно взять попробовать реверснуть саму процедуру с целью написания генератора паролей. Есть, конечно, люди, которые могут и Triple RSA закейгенить, но я не из таких (к сожалению). Куда проще найти процедуру, которая выводит сделанный игрой пароль на экран и просто записать ее на языке высокого уровня.  
Зайдя на экран вывода готового пароля, выясняем, что ячейки, в которых хранятся буквы пароля, не изменились (0x280E - 0x2812). Поэтому поставим останов на запись в этот диапазон и войдем на экран вывода пароля:  
![Debug_Write](Debug_Write.png)  
Игра вывалилась по адресу 1A53E - это процедура записи готового пароля в ячейки:  
![Graph_of_Write_Password](Graph_of_Write_Password.png)  
Видно, что процедуре через регистр d7 передается чексумма будущего пароля. Если посмотреть на возможные места вызова этой процедуры (в отладчике или просто анализируя участки кода выше), натыкаемся на такое место:  
![Graph_of_Pass_Output](Graph_of_Pass_Output.png)  
Где встречаем уже знакомую нам процедуру CheckSum_Calc.Теперь у нас есть все, чтобы без проблем написать генератор паролей для игры. Исходники генератора на Паскале можно посмотреть [здесь](/files/CannonFodder_PWD_Util.rar).А страничка со скриптом, вычисляющим пароли, как всегда, [здесь](/passgen/).  

Напоследок, почему рекомендуется оформлять генератор паролей в виде .html страницы:  

1. Размер. В большинстве случаев, размер страницы оказывается меньше, чем подобное приложение на ассемблере (и несравнимо меньше затраты времени на разработку). JavaScript обладает всеми необходимыми для генератора элементами формы (чекбоксы, выпадающие списки, области ввода, кнопки и т.п.). А скорости от генератора никто и не требует.
1. Скрипт не исполняется на машине пользователя и не имеет доступа к файловой системе / реестру напрямую. Значит, вероятность того, что ваш генератор окажется вредоносным, минимальна - это успокаивает пользователя, который всегда с опаской запускает на своей машине исполняемый файл от незнакомого человека.
1. JavaScript должен одинаково работать на любых браузерах под любыми операционными системами, что и не снилось исполняемым файлам.
1. JavaScript элементарно встраивается в любую нужную вам HTML страницу, например вот 
так:
<script type="text/javascript">
function get_password() 
 { 
  var tmp = ''; hex = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; 
  for(i=0; i<5; i++) tmp += hex.charAt(pwd[i]); 
  return tmp 
 } 
 
 function ROR_W (Count, A)
 {var i, result 
 
 for (i = 1; i<= Count; i++)
 {
 result = (A >> 1)|((A & 1) << 15);
 A = result
 }
 return result
}

function Div_W(reg,oper)
{var Hi, Lo, reg, oper, result 

 Lo = Math.floor(reg / oper);
 Hi = reg - Lo*oper;
 result = Lo|(Hi << 16);
 return result
}


//--------------------Shuffle Data-----------------------
function Shuffle_Data() 
{
var
d1_tmp, d7_tmp ;

 d7_tmp = 0xD;//особенность dbf
 d1_tmp = d0;
 do
 {d0 ^= (d1_tmp >> 1);
 d7_tmp--
 } 
 while(d7_tmp != 0);
 d0 &= 1 
}
//--------------------End Shuffle Data------------------


//--------------------CheckSum Calc-----------------------
function CheckSum_Calc()
{
document.passform.check.checked = false;
d0 = (document.passform.level.value & 0xFF)%24;
if (d0 == 0 | d0 > 360) document.passform.check.checked = true;
d1 = (document.passform.soldier.value & 0x3FF)%361;
if (d1 == 0 | d1 > d0*15) document.passform.check.checked = true;

CheckSum = 0;
d7 = d0;
d1 <<= 5;
d7 |= d1;
d0 = d7;
Shuffle_Data();
d0 = ROR_W(1,d0);
d7 |= d0;
d0 = (ROR_W(1,d0)) ^ 0x4000;
d7 |= d0;
d6 = d7 >> 8;
d6 = (d6 & 0xFF00)|((d6 + (d7 & 0xFF)) & 0xFF); //add.b
d6 = (ROR_W(2,d6)) & 0x7F;
CheckSum_L = d7;
CheckSum_H = d6;
CheckSum = ((CheckSum|d6) << 16) |d7
}
//-------------------- END CheckSum Calc------------------



//-------------------Main-------------------------------
function generate (){

var d0,d1,d6,d7,
CheckSum, d0_l,i;
pwd = Array(5);

CheckSum_Calc();
for (i=0; i<= 4; i++)
 {
 d0_l = Div_W(CheckSum_H,26);
 CheckSum_H = d0_l & 0xFFFF;
 d0_l = (d0_l & 0xFFFF0000)|CheckSum_L ;
 d0_l = Div_W(d0_l,26);
 CheckSum_L = d0_l & 0xFFFF;
 pwd[i] = d0_l >> 16
 }
document.passform.password.value=get_password()
}
</script>
<center>
<span class="style1">SEGA Genesis/MD "Cannon Fodder" Password Generator</span><br>
<form name="passform">
<br>
<table style="border:1px solid #000" class="text">
<tr>
<td>Level:
<td><input onchange="generate()" type="text" maxlength="3" size="3" value="1" name="level"/>
<tr>
<td>Soldiers Alive:
<td><input onchange="generate()" type="text" maxlength="3" size="3" value="1" name="soldier"/>
<tr>
<td>Password:
<td><input type="text" name="password" size="6" class="Code" readonly/>
              <tr>
<td>Hangs up the game:
<td><input type="checkbox" name="check" disabled="true"/>
<tr><tr><td><td><input onclick="generate()" type="button" value="Generate"/>
</table>
<span class="text">\*Level_Number < 24, Soldiers_Alive_Quantity < 361;<br>
        \*If Soldiers_Alive_Quantity > (Level_Number x 15), password will hang up the game;<br>
        \*If Soldiers_Alive_Quantity < (Soldiers_On_Mission + 1), password will hang up the game.<br>
            </span>
          </form>
        </center>
К тому же, исходник скрипта любопытствующие смогут всегда увидеть в исходном коде страницы.