--------------------------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
import           Data.Monoid (mappend, mconcat)
import           Hakyll
import GHC.IO.Encoding


--------------------------------------------------------------------------------
main :: IO ()
main = do
  setLocaleEncoding utf8
  setFileSystemEncoding utf8
  setForeignEncoding utf8
  hakyll $ do
    match "images/*" $ do
        route   idRoute
        compile copyFileCompiler

    match "css/*" $ do
        route   idRoute
        compile compressCssCompiler
{--
    match (fromList ["about.rst", "contact.markdown"]) $ do
        route   $ setExtension "html"
        compile $ pandocCompiler
            >>= loadAndApplyTemplate "templates/default.html" defaultContext
            >>= relativizeUrls
--}

    match "news/*" $ do
        route $ setExtension "html"
        compile $ pandocCompiler
--            >>= loadAndApplyTemplate "templates/post.html"    postCtx
            >>= saveSnapshot "content"

{--
    create ["archive.html"] $ do
        route idRoute
        compile $ do
            posts <- recentFirst =<< loadAll "posts/*"
            let archiveCtx =
                    listField "posts" postCtx (return posts) `mappend`
                    constField "title" "Archives"            `mappend`
                    defaultContext

            makeItem ""
                >>= loadAndApplyTemplate "templates/archive.html" archiveCtx
                >>= loadAndApplyTemplate "templates/default.html" archiveCtx
                >>= relativizeUrls
--}

    create ["index.html"] $ do
         route   idRoute
         compile $ do
           posts <- fmap (take 3) . recentFirst =<< loadAllSnapshots "news/*" "content"
           let indexCtx = mconcat
                          [ listField "posts" postCtx (return posts)
                          , defaultContext
                          ]

           makeItem ""
            >>= loadAndApplyTemplate "templates/new-list.html" indexCtx
            >>= loadAndApplyTemplate "templates/default.html" postCtx
            >>= relativizeUrls
          
          
          --}        
        {--$ do
            news<- recentFirst =<< loadAllSnapshots "news/*" "content"
            let indexCtx =
                    -- listField "news" postCtx (return news) `mappend`
                    (return news) `mappend`
                    defaultContext

            pandocCompiler
                >>= loadAndApplyTemplate "templates/new-list.html" indexCtx
                >>= loadAndApplyTemplate "templates/default.html" indexCtx
                >>= relativizeUrls

--}
    match "templates/*" $ compile templateCompiler


--------------------------------------------------------------------------------
postCtx :: Context String
postCtx =
    dateField "date" "%B %e, %Y" `mappend`
    defaultContext
